pipeline {
    agent any
    
    tools{
        jdk 'jdk'
        maven 'maven'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Git-Checkout') {
            steps {
                script {
                    // Dynamically checkout the branch associated with the multibranch pipeline
                    echo "Branch being built: ${env.BRANCH_NAME}"
                    checkout scm
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'sonar-scanner';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'sonartoken', installationName: 'sonarqube') {

                sh ''' ${scannerHome}/bin/sonar-scanner -Dsonar.url=http://52.87.207.241:9000/ -Dsonar.login=squ_4bbe1fd0e273894ee497eea8d7f1490a4796f869 -Dsonar.projectName=demo-ekart-1 \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=demo-ekart-1 '''
              }
            }
        }


        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests=true'
            }
        }
        
        stage('Build and Tag Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        // Get the branch name and commit ID
                        def branchName = env.BRANCH_NAME.replaceAll('/', '-') // Replace slashes with hyphens for Docker tag compatibility
                        def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

                        echo "Building Docker image for branch: ${branchName}, commit ID: ${commitId}"

                        // Build the Docker image
                        sh "docker build -t ekart -f docker/Dockerfile ."

                        // Tag the image with branch name and commit ID
                        sh "docker tag ekart pravinhcl/ekart:${branchName}-${commitId}"

                        // Tag the image as 'latest' for the branch
                        sh "docker tag ekart pravinhcl/ekart:${branchName}-latest"

                        // Push all tags to Docker Hub
                        sh "docker image push --all-tags pravinhcl/ekart"
                    }
                }
            }
        }

        stage('Update ansible/deploy.yml') {
            steps {
                script {
                    // Get the branch name and commit ID
                    def branchName = env.BRANCH_NAME.replaceAll('/', '-') // Replace slashes with hyphens for Docker tag compatibility
                    def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

                    echo "Updating ansible/deploy.yml for branch: ${branchName}, commit ID: ${commitId}"

                    // Update the ansible/deploy.yml file with the new image tag
                    sh "sed -i 's|tag: .*|tag: ${branchName}-${commitId}|' ansible/deploy.yml"
                    sh "sed -i 's|image: pravinhcl/ekart:.*|image: pravinhcl/ekart:${branchName}-${commitId}|' ansible/deploy.yml"
                }
            }
        }

        stage('Transfer Ansible Files') {
            steps {
                script {
                    sh 'scp -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no -r ansible/ root@34.228.42.87:/home/ansible/workspace/CI-Pipeline'
                }
            }
        }

        stage('Deploy via Ansible') {
            steps {
                script {
                    sh 'ssh -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no root@34.228.42.87 "cd /home/ansible/workspace/CI-Pipeline && ansible-playbook -i ansible/hosts ansible/deploy.yml"'
                }
            }
        }
    }
}
